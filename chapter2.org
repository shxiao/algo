* 
** Input Size,算法分析中需要描述问题的输入大小，不同的问题使用不同的测量点
** Running Time 运行时间，每行代码花费的时间和这行代码执行的次数
** Best-case,worse-case,average-case
** Order of growth θ(n^2),


* 2.2 Answer
** 2
// Loop variant:
// init i = 0,这是左边只有0个元素，所以是排序
// loop i ,每次都是从左边序列中取出最小的放到序列中最右边，而先前的数据又比这个数据小，所以也是有序的
// 终止状态 i = n -1,这是剩下最后一个数据，自然是最大元素
// 运行到n-1时就可以是因为最后一个元素不需要找最小值了，
// 运行时间是f(n) = c1*(n-1) + c2*(n-1)+ c3* n*(n-1)/2 + c4*n*(n-1)/2 + c6* n-1
//              = an^2+b*n+c
//              =  n^2
// Best Case,序列本身就是排序的，但第二个循环每次都要遍历子序列找到最小值，但第一个值即使最小值，但是比较还必须有，只是没有执行smallest = j,所以执行时间还是n^2
// Worse Case序列刚好是相反的序列，和最好情况一样，只是每次都是执行smallest=j这个指令，复杂度也是n^2   
** 2.2-3
平均情况是n/2
最坏情况是n
两者都是线性的

* 2.3 Designing algorithms
** 增量设计方法，从零开始，然后逐步添加使其满足要求的特性，直至加完所有的东西，插入排序就是次方法
** 分治法，先分解，然后解决子问题，最后组合子问题的解决方法作为最后的答案
